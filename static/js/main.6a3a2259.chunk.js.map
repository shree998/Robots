{"version":3,"sources":["serviceWorker.js","Cards.js","CardList.js","SearchBar.js","robots.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","card","name","id","email","className","alt","src","List","element","ListItem","map","user","i","key","Search","searchChange","type","placeholder","onChange","robots","username","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","console","log","state","robot","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCWSC,MAZf,YAAkC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,MAEvB,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,KAC7C,4BAAKD,GACL,2BAAIE,KCJOI,MAdf,YAAyB,IAAVC,EAAS,EAATA,QACRC,EAAWD,EAAQE,KAAI,SAACC,EAAMC,GAEjC,OACC,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAMM,EAAQI,GAAGV,GAAID,KAAQO,EAAQI,GAAGX,KAAME,MAASK,EAAQI,GAAGT,WAGjF,OACC,6BACCM,ICDSK,MAVf,YAAgC,IAAfC,EAAc,EAAdA,aAEhB,OACE,6BACA,2BAAOC,KAAK,SAASC,YAAY,sBAAsBC,SAAUH,MCPvDI,EAAS,CACrB,CACCjB,GAAG,EACHD,KAAK,mBACLmB,SAAS,OACTjB,MAAM,8BAEP,CACCD,GAAG,EACHD,KAAK,cACLmB,SAAS,QACTjB,MAAM,yBAEP,CACCD,GAAG,EACHD,KAAK,sBACLmB,SAAS,SACTjB,MAAM,kCAEP,CACCD,GAAG,EACHD,KAAK,aACLmB,SAAS,QACTjB,MAAM,wBAEP,CACCD,GAAG,EACHD,KAAK,kBACLmB,SAAS,OACTjB,MAAM,8BCpBOkB,G,MAPA,SAACC,GACf,OACC,yBAAKC,MAAO,CAACC,UAAW,UAAWC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,YCoGMC,E,kDAtCd,aAAc,IAAD,8BACZ,gBAODC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,QAC3CC,QAAQC,IAAIN,EAAMG,OAAOC,QARzB,EAAKG,MAAQ,CACZC,MAAQnB,EACRa,YAAa,IAJF,E,kGAmBJ,IAAD,OACDO,EAAiBC,KAAKH,MAAMC,MAAMG,QAAO,SAAAH,GAC9C,OAAOA,EAAMrC,KAAKyC,cAAcC,SAAS,EAAKN,MAAML,YAAYU,kBAIjE,OACE,yBAAKtC,UAAW,MAChB,wBAAIA,UAAU,QAAd,eACA,kBAAC,EAAD,CAAQW,aAAeyB,KAAKX,iBAC5B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAMrB,QAAS+B,U,GA/BDK,aC3DlBC,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA0BC,SAASC,eAAe,SP4H9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.6a3a2259.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/*import React, { Component } from 'react';\r\n\r\nclass Hello extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t<h1 className=\"f1 tc\">Hello World </h1> \r\n\t\t\t<p className=\"tc\">{this.props.message}</p>\r\n\t\t\t</div>\r\n\t\t\t  );\r\n\t}\r\n}\r\n\r\nexport default Hello;*/\r\n\r\nimport React from 'react';\r\n\r\nfunction card({name, id, email}) {\r\n\t\r\n\t\treturn(\r\n\t\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"robot\" src={`https://robohash.org/${id}`}></img>\r\n\t\t\t\t<h1>{name}</h1>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Cards';\r\n\r\n\r\n\r\nfunction List({element}){\r\n\tconst ListItem = element.map((user, i) => \r\n\t\t\t{\r\n\t\t\t return(\r\n\t\t\t\t\t<Card key={i} id = {element[i].id} name = {element[i].name} email = {element[i].email}/>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t});\r\n\t\t\t return(\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t{ListItem}\r\n\t\t\t\t\t</div>\r\n\t\t\t);\r\n} \r\n \r\nexport default List;","import React from 'react';\r\n\r\n\r\nfunction Search({searchChange}){\r\n\t\r\n\treturn(\r\n\t\t\t<div>\r\n\t\t\t<input type=\"search\" placeholder=\"search robo friends\" onChange={searchChange}></input>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Search; ","export const robots = [\r\n\t{\r\n\t\tid:1,\r\n\t\tname:\"Mathana Baripada\",\r\n\t\tusername:\"john\",\r\n\t\temail:\"mathana.baripada@gmail.com\",\r\n\t},\r\n\t{\r\n\t\tid:2,\r\n\t\tname:\"Rahul Kumar\",\r\n\t\tusername:\"rahul\",\r\n\t\temail:\"rahul.kumar@gmail.com\",\r\n\t},\r\n\t{ \r\n\t\tid:3,\r\n\t\tname:\"Priyadarsini Chandi\",\r\n\t\tusername:\"naveen\",\r\n\t\temail:\"priyadarsini.mallick@gmail.com\",\r\n\t},\r\n\t{\r\n\t\tid:4,\r\n\t\tname:\"Riya Gupta\",\r\n\t\tusername:\"nayan\",\r\n\t\temail:\"riya.gupta@gmail.com\",\r\n\t},\r\n\t{\r\n\t\tid:5,\r\n\t\tname:\"Abinash Mallick\",\r\n\t\tusername:\"akas\",\r\n\t\temail:\"abinash.mallick@gmail.com\",\r\n\t}\r\n]","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll ', border: '1px solid black', height: '500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Scroll;","//Latest React syntax\n/*import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;*/\n\n//Syntax that Andrei uses:\n/*import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n \nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n \nexport default App;*/\n\n\nimport React, {Component} from 'react';\nimport List from './CardList';\nimport Search from './SearchBar';\nimport { robots } from './robots.js';\nimport './App.css'\nimport Scroll from './Scroll.js';\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobot : robots,\n\t\t\tsearchField: ''\n\t\t}\n\t}   \n\t\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchField : event.target.value})\n\t\tconsole.log(event.target.value);\n\t}\n\t\n\tcomponentDidMount(){\n\t\t/*fetch('http://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response =>response.json())\n\t\t\t.then(users => this.setState({robot : users}));*/\n\t}\n\t\n\trender(){\n\t\tconst filteredRobots = this.state.robot.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n\t\t})\n\t\t\n\t\t\n\t\treturn(\n\t\t\t\t<div className= \"tc\">\n\t\t\t\t<h1 className=\"font\">Robofriends</h1>\n\t\t\t\t<Search searchChange ={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t<List element={filteredRobots}/>\n\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t);\n\t}\n\t\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(<React.StrictMode><App/></React.StrictMode>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}